version 1

## main
snippet main
	int main(int argc, const char *argv[]) {${1}
		${0}
		return 0;
	}

## main(void)
snippet mainn
	int main() {
		${0}
		return 0;
	}

## #include <...>
snippet inc
	#include <${1:stdio}.h>
	${0}

## #include "..."
snippet INC
	#include "${1:`vim_snippets#Filename("$1.h")`}"
	${0}

## ifndef...define...endif
snippet ndef
	#ifndef ${1:`toupper(vim_snippets#Filename('$1_H', 'UNTITLED_H'))`}
	#define $1

	${0}

	#endif /* end of include guard: $1 */

## if
snippet if
	if (${1:}) {
		${2}
	} ${0}

## if-else
snippet ife
	if (${1:}) {
		${2:}
	} else {
		${3:}
	} ${0}

## else-if
snippet ei
	else if (${1}) {
		${2}
	} 

## if-else_if-else
snippet ifee
	if (${1:}) {
		${2}
	} else if (${3:}) {
		${4:}
	} else {
		${5:}
	}

	${0}

## ternary
snippet t
	${1:/* condition */} ? ${2:if_true} : ${3:if_false}
	${0}

## switch
snippet sw
	switch (${1:/* variable */}) {
		case ${2:}: ${3:} break;
		default:
	}

	${0}

## case
snippet case
	case ${1:/* variable case */}: ${2:} break;

## for
snippet for
	for (int ${1:i} = 0; $1 < ${2:count}; $1++) {
		${0}
	}

## for (custom)
snippet forr
	for (int ${1:i} = ${2:0}; $1 < ${3:count}; $1${4:++}) {
		${0}
	}
	
## while
snippet wh
	while (${1:}) {
		${0}
	}

# do... while
snippet do
	do {
		${2}
	} while (${1});

## Functions

## typedef

## typedef struct
snippet td
	typedef struct ${1:} { 
		${2} 
	} $1;
	
## typedef struct
snippet type
	typedef struct ${1:} { 
		${2} 
	} $1;
	
## typedef struct
snippet typ
	typedef struct ${1:} { 
		${2} 
	} $1;

## enum
snippet enum
	typedef enum ${1:} { 
		${2} 
	} $1;

## printf
snippet pr
	printf("${1:}: %${2:s}\\n", $1);${0}
snippet fpr
	fprintf(${1:stderr}, "${2:%s}\\n"${3});${0}
snippet prd
	printf("${1:}: %d\\n", $1);${0}
snippet prf
	printf("${1:}: %f\\n", $1);${0}
snippet prx
	printf("${1:}: 0x%.4x\\n", $1);${0}
snippet prs
	printf("${1:}\\n");${0}

snippet as
	assert(3>4); // TEMP

## TODO section

## Miscellaneous
